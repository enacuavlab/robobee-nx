#!/usr/bin/env python3

WIDTH_OUT=1280
HEIGTH_OUT=720
WIDTH_IN=3264
HEIGTH_IN=2464
FPS=20
BITRATE=1000000


################################################################################
# NVIDIA

gst_out_format="appsrc \
      ! video/x-raw,format=BGR ! queue ! videoconvert ! nvvidconv ! video/x-raw(memory:NVMM),width="+str(WIDTH_OUT)+",height="+str(HEIGTH_OUT)+",framerate="+str(FPS)+"/1,format=I420 \
      ! nvv4l2h265enc insert-sps-pps=true bitrate="+str(BITRATE)+" ! h265parse ! rtph265pay pt=96 config-interval=1 mtu=1400 ! udpsink host=127.0.0.1 port=5700"

capt_device="/dev/video2"

################################################################################
# PI
#
################################################################################
import sys
sys.path.append('/home/pprz/Projects/pprzlink/lib/v2.0/python')
import pprzlink.udp
import pprzlink.message

import cv2
import numpy as np;
import threading
import time
import socket
LOCAL_IP="127.0.0.1"
PPRZ_PORT = 4244
WFB_PORT = 5900

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
param="()()"
param_ahrs="()"
param_gps="()"


def thread_cam_function(cond,cam):
  global img
  while True:
    ret_val, img = cam.read();
    if ret_val:
      with cond:
        cond.notify_all()


DEFAULT_SCALE_FACTOR = 4
DEFAULT_RESOLUTION = 20 # pixels per meter
def thread_blob_function(cond,lock,out):
  global img,sock
  scale=DEFAULT_SCALE_FACTOR
  res=DEFAULT_RESOLUTION
  scale_factor = pow(res / 1000., 2)
  size_factor = scale_factor
  cnt = 1

  th_min = [93, 90, 0]
  th_max = [138, 255, 255]
  hsv_th = [th_min,th_max]
  size = 1200
  size2 = size * size # real size in mm
  aspect_ratio_th=0.8
  area_th=0.7
  size_th=(10,300)
  kernel = np.ones((8,8),np.uint8) # create convolution

  if th_min[0] < th_max[0]: # h min < h max, normal case
    hsv_th = np.array([[th_min, th_max]])
  else: # split into two parts
    hsv_th = np.array([
      [[0        , th_min[1], th_min[2]],[th_max[0], th_max[1], th_max[2]]],
      [[th_min[0], th_min[1], th_min[2]],[179      , th_max[1], th_max[2]]]
      ])

  while True:
    with cond:
      cond.wait()
      img2 = img.copy()
      hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
      mask = None

      for th in hsv_th:
        hsv_min = np.array(th[0])
        hsv_max = np.array(th[1])
        if mask is None:
          mask = cv2.inRange(hsv, hsv_min, hsv_max)
        else:
         mask += cv2.inRange(hsv, hsv_min, hsv_max)

      mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel) # opening
      cnts = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]
      best_res = None
      best_score = 0.

      for cnt in cnts:
        rect = cv2.minAreaRect(cnt)
        _, (w, h), _ = rect
        min_wh = min(w, h)
        max_wh = max(w, h)
        if min_wh == 0 or max_wh == 0:
          continue
        if min_wh < size_th[0] or max_wh > size_th[1]:
          continue # too small or too big
        similarity = min_wh / max_wh
        if similarity < aspect_ratio_th:
          continue # not enough square
        area = w * h
        score_area = area # if no size factor, keep biggest one
        if size_factor is not None:
          score_area = 1. / max(1., abs(area - size2 * size_factor)) # score according to expected size
          area_ratio = cv2.contourArea(cnt) / area
          if area_ratio < area_th:
            continue # not enough full of color
          score = area_ratio * similarity * score_area
          if score > best_score:
            best_score = score
            best_res = rect

      if best_res is not None:
         center = (int(best_res[0][0]), int(best_res[0][1]))
         cv2.circle(img2, center, 50, (0, 255, 0), 5)
         cv2.putText(img2, f"BLUE_{cnt}", (center[0]+60, center[1]), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 255, 0))
         box = cv2.boxPoints(best_res)
         ctr = np.array(box).reshape((-1,1,2)).astype(np.int32)
         mask = np.zeros((img.shape[0], img.shape[1], 1), np.uint8)
         cv2.drawContours(mask, [ctr], -1, (255,255,255),-1)
         img = cv2.bitwise_and(img,img,mask = cv2.bitwise_not(mask))
         out.write(img2)


def proccess_pprz_msg(sender,address,msg,length,receiver_id=None, component_id=None):
  global param,param_ahrs,param_gps
  param_updated=False
  if msg.name=='AHRS_QUAT_INT':
    d={}
    for idx, f in enumerate(msg.fieldnames): d[f]=msg.fieldvalues[idx]
    param_ahrs='(%.2f %.2f %.2f %.2f %.2f)'%(d['weight'],d['body_qi'],d[ 'body_qx'],d['body_qy'],d['body_qz'])
    param_updated=True
  if msg.name=='ROTORCRAFT_FP':
    d={}
    for idx, f in enumerate(msg.fieldnames): d[f]=msg.fieldvalues[idx]
    param_gps='(%.2f %.2f %.2f)'%(d['east'],d['north'],d[ 'up'])
    param_updated=True
  if param_updated:
    param=param_gps+param_ahrs
    param_updated=False


if __name__ == '__main__':
  cam = cv2.VideoCapture(capt_device)
  if not cam.isOpened(): exit()

  out = cv2.VideoWriter(gst_out_format,cv2.CAP_GSTREAMER, 0, float(FPS), (int(WIDTH_IN), int(HEIGTH_IN)))
  if not out.isOpened(): exit()

  lock = threading.Lock()
  cond = threading.Condition()
  thread_cam  = threading.Thread(target=thread_cam_function, args=(cond,cam,))
  thread_blob  = threading.Thread(target=thread_blob_function, args=(cond,lock,out,))
  thread_pprz = pprzlink.udp.UdpMessagesInterface(proccess_pprz_msg, False, 0, PPRZ_PORT, 'datalink')

  thread_pprz.start()
  thread_cam.start()
  thread_blob.start()

  while True :
    time.sleep(0.03)
    key = cv2.waitKey(1)
    if key == ord('q'): break
